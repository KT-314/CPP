#include "prog.h"

void Operator1() {

    auto print = [](auto v) { std::cout << v << '\n'; };
    auto _ = [](auto str2, auto _2, auto str8, auto _8,
                auto str10, auto _10, auto str16, auto _16) {

        std::cout << str2  << std::setw(3)  << _2  << " | "
                  << str8  << std::setw(3)  << _8  << " | "
                  << str10 << std::setw(3)  << _10 << " | "
                  << str16 << std::setw(3)  << _16 << " | "
                  << std::endl;
    };

    print("          2進数         8進数    10進数    16進数");
    print("___________________________________________________");
    _("  0. 0b0000'0000:", 0b0000'0000, "000:", 000, " 0:",  0, "0x00:", 0x00);
    _("  1. 0b0000'0001:", 0b0000'0001, "001:", 001, " 1:",  1, "0x01:", 0x01);
    _("  2. 0b0000'0010:", 0b0000'0010, "002:", 002, " 2:",  2, "0x02:", 0x02);
    _("  3. 0b0000'0011:", 0b0000'0011, "003:", 003, " 3:",  3, "0x03:", 0x03);
    _("  4. 0b0000'0100:", 0b0000'0100, "004:", 004, " 4:",  4, "0x04:", 0x04);
    _("  5. 0b0000'0101:", 0b0000'0101, "005:", 005, " 5:",  5, "0x05:", 0x05);
    _("  6. 0b0000'0110:", 0b0000'0110, "006:", 006, " 6:",  6, "0x06:", 0x06);
    _("  7. 0b0000'0111:", 0b0000'0111, "007:", 007, " 7:",  7, "0x07:", 0x07);
    _("  8. 0b0000'1000:", 0b0000'1000, "010:", 010, " 8:",  8, "0x08:", 0x08);
    _("  9. 0b0000'1001:", 0b0000'1001, "011:", 011, " 9:",  9, "0x09:", 0x09);
    _(" 10. 0b0000'1010:", 0b0000'1010, "012:", 012, "10:", 10, "0x0A:", 0x0A);
    _(" 11. 0b0000'1011:", 0b0000'1011, "013:", 013, "11:", 11, "0x0B:", 0x0B);
    _(" 12. 0b0000'1100:", 0b0000'1100, "014:", 014, "12:", 12, "0x0C:", 0x0C);
    _(" 13. 0b0000'1101:", 0b0000'1101, "015:", 015, "13:", 13, "0x0D:", 0x0D);
    _(" 14. 0b0000'1110:", 0b0000'1110, "016:", 016, "14:", 14, "0x0E:", 0x0E);
    _(" 15. 0b0000'1111:", 0b0000'1111, "017:", 017, "15:", 15, "0x0F:", 0x0F);

    _(" 16. 0b0001'0000:", 0b0001'0000, "020:", 020, "16:", 16, "0x10:", 0x10);
    _(" 17. 0b0001'0001:", 0b0001'0001, "021:", 021, "17:", 17, "0x11:", 0x11);
    _(" 18. 0b0001'0010:", 0b0001'0010, "022:", 022, "18:", 18, "0x12:", 0x12);
    _(" 19. 0b0001'0011:", 0b0001'0011, "023:", 023, "19:", 19, "0x13:", 0x13);
    _(" 20. 0b0001'0100:", 0b0001'0100, "024:", 024, "20:", 20, "0x14:", 0x14);
    _(" 21. 0b0001'0101:", 0b0001'0101, "025:", 025, "21:", 21, "0x15:", 0x15);
    _(" 22. 0b0001'0110:", 0b0001'0110, "026:", 026, "22:", 22, "0x16:", 0x16);
    _(" 23. 0b0001'0111:", 0b0001'0111, "027:", 027, "23:", 23, "0x17:", 0x17);
    _(" 24. 0b0001'1000:", 0b0001'1000, "030:", 030, "24:", 24, "0x18:", 0x18);
    _(" 25. 0b0001'1001:", 0b0001'1001, "031:", 031, "25:", 25, "0x19:", 0x19);
    _(" 26. 0b0001'1010:", 0b0001'1010, "032:", 032, "26:", 26, "0x1A:", 0x1A);
    _(" 27. 0b0001'1011:", 0b0001'1011, "033:", 033, "27:", 27, "0x1B:", 0x1B);
    _(" 28. 0b0001'1100:", 0b0001'1100, "034:", 034, "28:", 28, "0x1C:", 0x1C);
    _(" 29. 0b0001'1101:", 0b0001'1101, "035:", 035, "29:", 29, "0x1D:", 0x1D);
    _(" 30. 0b0001'1110:", 0b0001'1110, "036:", 036, "30:", 30, "0x1E:", 0x1E);
    _(" 31. 0b0001'1111:", 0b0001'1111, "037:", 037, "31:", 31, "0x1F:", 0x1F);
    _(" 32. 0b0010'0000:", 0b0010'0000, "040:", 040, "32:", 32, "0x20:", 0x20);

    std::cout << "255. 0b0'1111'1111: " << 0b0000'1111'1111 << std::endl;
    std::cout << "256. 0b1'0000'0000: " << 0b0001'0000'0000 << std::endl;
}
